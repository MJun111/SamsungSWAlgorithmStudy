1. 구슬 탈출 2
- 문제 설명
	구슬 탈출은 직사각형 보드에 빨간 구슬과 파란 구슬을 하나씩 넣은 다음, 빨간 구슬을 구멍을 통해 빼내는 게임
	상, 하, 좌, 우 이동할 수 있음 최대 10회만큼 이동 가능

- 문제 분류
	구현
	그래프 이론
	그래프 탐색
	너비 우선 탐색
	시뮬레이션

- 문제 키워드
	빨간 구슬이 구멍에 빠지면 성공이지만, 파란 구슬이 구멍에 빠지면 실패이다.
	빨간 구슬과 파란 구슬이 동시에 구멍에 빠져도 실패이다.
	기울이는 동작을 그만하는 것은 더 이상 구슬이 움직이지 않을 때 까지이다.

- 해결 방안
 	구슬 탈출 2 코드 첨부
	예시 코드: 메모리 11584KB, 시간 72ms, 코드 길이 2290B
	나의 코드: 메모리 114560KB, 시간 576ms, 코드 길이 9676B

- 해결 방안의 장점
	속도가 빠르다. 메모리도 적게 든다.

- 해결 방안의 중요 포인트
	빨간 공과 파란 공의 위치를 int 변수로 저장함
	ArrayDeque를 사용하여 처음에 빨간 공, 파란 공을 집어 넣음
	now 변수를 이용하여 변경된 위치를 저장함
	재귀가 아닌 반복문 + deque를 이용함


2. 주사위 굴리기
- 문제 설명
	주사위를 굴렸을 때, 이동한 칸에 쓰여 있는 수가 0이면, 주사위의 바닥면에 쓰여 있는 수가 칸에 복사된다. 
	0이 아닌 경우에는 칸에 쓰여 있는 수가 주사위의 바닥면으로 복사되며, 칸에 쓰여 있는 수는 0이 된다.

- 문제 분류
	구현

- 문제 키워드
	주사위를 어떻게 구현하는가

- 해결 방안
	주사위 굴리기 코드 첨부
	예시 코드: 메모리 12992KB, 시간 72ms, 코드 길이 3395B
	나의 코드: 메모리 12684KB, 시간 152ms, 코드 길이 5040B

- 해결 방안의 장점
	속도가 빠르다. 메모리도 적게 든다.

- 해결 방안의 중요 포인트
	시간 단축을 위해 int 값을 받을 때 string으로 받아와서 charAt을 사용함
	이용 예시) str.charAt(j*2)-'0'
	사용 예가 적으니 dx dy를 만들지 않고 바로 적용함
	StringBuilder를 사용함



3. 경사로
- 문제 설명
	길을 지나갈 수 있으려면 길에 속한 모든 칸의 높이가 모두 같아야 한다.
	또는, 경사로를 놓아서 지나갈 수 있는 길을 만들 수 있다. 
	지도가 주어졌을 때, 지나갈 수 있는 길의 개수를 구하는 프로그램을 작성하시오.

- 문제 분류
	구현

- 문제 키워드
	경사로를 놓을 수 있는지 없는지를 파악해야 함

- 해결 방안
	경사로 코드 첨부
	예시 코드: 메모리 13084KB, 시간 76ms, 코드 길이 5276B
	나의 코드: 메모리 12828KB, 시간 100ms, 코드 길이 5587B

- 해결 방안의 장점
	속도가 빠르다. 메모리도 적게 든다.

- 해결 방안의 중요 포인트
	반복문에 outer: 를 사용하여 풀이함.
	크게 isGood(현재 상태), curNum(현재 까지 보관한 블럭의 개수), curChar(비교할 현재 변수), exChar(비교할 이전 변수), needBase(다음부터 필요한 동일한 값의 개수) 변수를 사용하여 분기별로 진행
	비교를 char로 이전 값과 현재 값을 비교하여 풀이함

4. 톱니바퀴
- 문제 설명
	톱니바퀴가 회전할 때, 서로 맞닿은 극에 따라서 옆에 있는 톱니바퀴를 회전시킬 수도 있고, 회전시키지 않을 수도 있다.
	톱니바퀴 A를 회전할 때, 그 옆에 있는 톱니바퀴 B와 서로 맞닿은 톱니의 극이 다르다면, B는 A가 회전한 방향과 반대방향으로 회전하게 된다.
	톱니바퀴의 초기 상태와 톱니바퀴를 회전시킨 방법이 주어졌을 때, 최종 톱니바퀴의 상태를 구하는 프로그램을 작성하시오.

- 문제 분류
	구현

- 문제 키워드
	톱니의 가장 왼쪽 톱니바퀴와 가장 오른쪽 톱니바퀴를 어떻게 지정하는가
	그리고 톱니바퀴의 회전을 어떻게 구현하는가

- 해결 방안
	톱니바퀴 코드 첨부
	예시 코드: 메모리 12972KB, 시간 72ms, 코드 길이 3112B
	나의 코드: 메모리 11940KB, 시간 84ms, 코드 길이 3986B

- 해결 방안의 장점
	속도가 빠르다. 메모리도 적게 든다.

- 해결 방안의 중요 포인트
	톱니바퀴를 이차원 int 배열로 구현함
	톱니바퀴의 양 끝의 상태를 boolean 배열인 chk에 저장함

5. 큐빙
- 문제 설명
	큐브는 각 면을 양방향으로 90도 만큼 돌릴 수 있도록 만들어져 있다.
	루빅스 큐브를 돌린 방법이 순서대로 주어진다.
	이때, 모두 돌린 다음에 가장 윗 면의 색상을 구하는 프로그램을 작성하시오.

- 문제 분류
	구현

- 문제 키워드
	큐브를 어떻게 구현하는가 ( 한 면을 돌렸을 때 해당 면 자체도 돌아가면서, 해당 면에 접하고 있는 다른 면들의 일부도 변경되어야 함)

- 해결 방안
	큐빙 코드 첨부
	예시 코드: 메모리 18344KB, 시간 144ms, 코드 길이 8361B
	나의 코드: 메모리 26588KB, 시간 232ms, 코드 길이 20494B

- 해결 방안의 장점
	속도가 빠르다. 메모리도 적게 든다.

- 해결 방안의 중요 포인트
	StringBuilder를 사용함
	큐브의 내용물을 int로 지정하고 추후에 출력할 때 변경해줌